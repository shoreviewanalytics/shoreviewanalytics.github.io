<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="https://shoreviewanalytics.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shoreviewanalytics.github.io/" rel="alternate" type="text/html" /><updated>2019-08-26T18:27:35-04:00</updated><id>https://shoreviewanalytics.github.io/</id><title type="html">shoreviewanalytics.github.io</title><subtitle></subtitle><author><name>Chad Downey</name></author><entry><title type="html">Fixing The 401 Unauthorized Message After Installing Tomcat9 On Ubuntu 18.04</title><link href="https://shoreviewanalytics.github.io/Fixing-The-401-Unauthorized-Message-After-Installing-Tomcat9-On-Ubuntu-18.04/" rel="alternate" type="text/html" title="Fixing The 401 Unauthorized Message After Installing Tomcat9 On Ubuntu 18.04" /><published>2019-08-26T00:00:00-04:00</published><updated>2019-08-26T00:00:00-04:00</updated><id>https://shoreviewanalytics.github.io/Fixing-The-401-Unauthorized-Message-After-Installing-Tomcat9-On-Ubuntu-18.04</id><content type="html" xml:base="https://shoreviewanalytics.github.io/Fixing-The-401-Unauthorized-Message-After-Installing-Tomcat9-On-Ubuntu-18.04/">&lt;h1 id=&quot;installing-tomcat-9-on-ubuntu-1804&quot;&gt;Installing Tomcat 9 on Ubuntu 18.04&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Fixing the 401 Unauthorized Message&lt;/strong&gt;&lt;/p&gt;

&lt;h6 id=&quot;introduction&quot;&gt;Introduction&lt;/h6&gt;

&lt;p&gt;Apache Tomcat® is an open source implementation of Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies. This guide explains how to setup Apache Tomcat® 9 on Ubuntu 18.04 and essentially follows the same steps that you can find in other posted tutorials (see reference below) .&lt;/p&gt;

&lt;p&gt;While this post can be used for a fresh install of Tomcat 9 on Ubuntu 18.04 it clarifies the security problems that can occur when trying to access the Server Status, Manager App and the Host Application buttons on the Tomcat home page after an initial install.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shoreviewanalytics.github.io/assets/images/buttons.png&quot; alt=&quot;buttons&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If, you have successfully installed Tomcat 9, but when you try to access one of the administrative pages like “Server Status “ or “Host Manager” you get the “401 Unauthorized” message, you can safely skip down to Steps 6 to 8 below.&lt;/p&gt;

&lt;p&gt;You will get the “401 Unauthorized message” if there is an issue with how users or roles are setup.  So no matter what you do, you will be prompted to enter credentials, which does not work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shoreviewanalytics.github.io/assets/images/credentials.png&quot; alt=&quot;credentials&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This prompt won’t go away until it recognizes you as a valid user.  If you click cancel you get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shoreviewanalytics.github.io/assets/images/401Unauthorized.png&quot; alt=&quot;Unauthorized&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;In order to proceed with this guide it is necessary to have non-root user with sudo privileges setup on your server or desktop install of Ubuntu.&lt;/p&gt;

&lt;h2 id=&quot;step-1-install-java&quot;&gt;Step 1 Install Java&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt update
sudo apt install default-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can check the version of Java using the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see output like the following.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openjdk 11.0.4 2019-07-16
OpenJDK Runtime Environment (build 11.0.4+11-post-Ubuntu-1ubuntu218.04.3)
OpenJDK 64-Bit Server VM (build 11.0.4+11-post-Ubuntu-1ubuntu218.04.3, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2-create-the-tomcat-user-and-group&quot;&gt;Step 2 Create The Tomcat User and Group&lt;/h2&gt;

&lt;p&gt;For security purposes it is best to run Tomcat with a non-root user. Use the following commands to create a “tomcat” group and user.&lt;/p&gt;

&lt;p&gt;First create the Tomcat group.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo groupadd tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, create a new tomcat user and add it to the newly created tomcat group, setting the -d flag to the home directory of /opt/tomcat (the Tomcat installation directory). Set the -s flag to /bin/false (so nobody can log into the account):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3-install-tomcat&quot;&gt;Step 3 Install Tomcat&lt;/h2&gt;

&lt;p&gt;To install the latest version of Tomcat go to the download page for Tomcat 9.&lt;/p&gt;

&lt;p&gt;https://tomcat.apache.org/download-90.cgi&lt;/p&gt;

&lt;p&gt;Once on this page you can hover over the download link for the tar.gz download. At this time the version is 9.0.24.&lt;/p&gt;

&lt;p&gt;Open up terminal window and cd to Downloads directory.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd Downloads&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next issue the following curl command. Be sure that the curl command includes the most recent version of Tomcat 9.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -O http://mirror.cc.columbia.edu/pub/software/apache/tomcat/tomcat-9/v9.0.24/bin/apache-tomcat-9.0.24.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next create a directory for Tomcat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir /opt/tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now extract and copy the content of the extracted tar.gz file to /opt/tomcat using the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo tar xzvf apache-tomcat-9*tar.gz -C /opt/tomcat --strip-components=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next cd into the /opt/tomcat directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /opt/tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Give tomcat permission to the entire /opt/tomcat directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chgrp -R tomcat /opt/tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next give read to the conf directory and all its content and execute access on the directory itself.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chmod -R g+r conf
sudo chmod g+x conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now make the tomcat user the owner of the /webapps, /work, /temp and /logs directories.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo chown -R tomcat webapps/ work/ temp/ logs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-4---setting-up-the-tomcat-service&quot;&gt;Step 4 - Setting Up The Tomcat Service&lt;/h2&gt;

&lt;p&gt;In order to have tomcat available as a service it is necessary to create a systemd service file.  The service file contains a line that points to the jdk installed in step 1.  To obtain the path to the jdk use the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo update-java-alternatives -l
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see output like this.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;java-1.11.0-openjdk-amd64      1111       /usr/lib/jvm/java-1.11.0-openjdk-amd64
java-8-oracle                  1081       /usr/lib/jvm/java-8-oracle
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have more than one jdk on your system like I do you will see a few lines.  That’s not an issue but you will need the path in the first line for the systemd service file.&lt;/p&gt;

&lt;p&gt;Next create a systemd service file for tomcat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /etc/systemd/system/tomcat.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Insert the following lines into the newly created service file. And make sure that the Environment=JAVA_HOME= points to the location where you have the jdk installed in step 1.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Unit]
Description=Apache Tomcat Web Application Container
After=network.target

[Service]
Type=forking

Environment=JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64
Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
Environment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'
Environment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'

ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh

User=tomcat
Group=tomcat
UMask=0007
RestartSec=10
Restart=always

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Save and close the tomcat.service file and then reload the systemd daemon.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl daemon-reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next start tomcat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl start tomcat.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check the status.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl status tomcat.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-5---adjust-firewall-and-test&quot;&gt;Step 5 - Adjust Firewall and Test&lt;/h2&gt;

&lt;p&gt;Tomcat uses port 8080 by default.  To allow port 8080 on a server with ufw enabled, execute the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ufw allow 8080
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To check to see that this rule is active using this command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo ufw status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should see output similar to the following.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Status: active

To                         Action      From
--                         ------      ----
8080                       ALLOW       Anywhere                  
8080 (v6)                  ALLOW       Anywhere (v6)  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next navigate to your servers localhost:8080 or your servers IP address:8080.  You should see the home page for Tomcat.&lt;/p&gt;

&lt;h2 id=&quot;step-6---configure-roles-users&quot;&gt;Step 6 - Configure Roles, Users&lt;/h2&gt;

&lt;p&gt;In order to access the administrative pages for Tomcat it is necessary to login with administrative credentials.  To do this it is necessary to define a user and password in the tomcat-users.xml file as follows.&lt;/p&gt;

&lt;p&gt;Open the tomcat-users.xml file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /opt/tomcat/conf/tomcat-users.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Uncomment the lines as shown below.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;!--
  &amp;lt;role rolename=&quot;tomcat&quot;/&amp;gt;
  &amp;lt;role rolename=&quot;role1&quot;/&amp;gt;
  &amp;lt;user username=&quot;tomcat&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;tomcat&quot;/&amp;gt;
  &amp;lt;user username=&quot;both&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;tomcat,role1&quot;/&amp;gt;
  &amp;lt;user username=&quot;role1&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;role1&quot;/&amp;gt;
--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now have the following lines uncommented.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;role rolename=&quot;tomcat&quot;/&amp;gt;
&amp;lt;role rolename=&quot;role1&quot;/&amp;gt;
&amp;lt;user username=&quot;tomcat&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;tomcat&quot;/&amp;gt;
&amp;lt;user username=&quot;both&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;tomcat,role1&quot;/&amp;gt;
&amp;lt;user username=&quot;role1&quot; password=&quot;&amp;lt;must-be-changed&amp;gt;&quot; roles=&quot;role1&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next change the default lines above to the following three lines.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;role rolename=&quot;manager-gui&quot;/&amp;gt;
&amp;lt;role rolename=&quot;admin-gui&quot;/&amp;gt;
&amp;lt;user username=&quot;username goes here!&quot; password=&quot;password goes here!&quot; roles=&quot;manager-gui,admin-gui&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice that there are now two lines for roles and one user line.  You can add more to the configuration later if needed but this is enough to get started.&lt;/p&gt;

&lt;p&gt;Next, add a username and a password where you see “username goes here!” and “password goes here!”.&lt;/p&gt;

&lt;p&gt;Save and close the file when done.&lt;/p&gt;

&lt;h2 id=&quot;step-7---granting-access-to-the-manager-application&quot;&gt;Step 7 - Granting Access To The Manager Application&lt;/h2&gt;

&lt;p&gt;After adding an admin user and password in Step 7 you are set to configure access to the Manager application.&lt;/p&gt;

&lt;p&gt;First open the configuration file for the Manager application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /opt/tomcat/webapps/manager/META-INF/context.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Edit the the following line by adding the IP address of the server to end.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;The changed line should look something like the following, where the “&lt;/td&gt;
      &lt;td&gt;IP address of your server goes here!” matches your server’s IP address.  Note it is necessary to add the pipe symbol to delimit between the entries of allowed IP addresses.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Valve className=&quot;org.apache.catalina.valves.RemoteAddrValve&quot; allow=&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|IP address of your server goes here!&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next save the file and exit.&lt;/p&gt;

&lt;h2 id=&quot;step-8---granting-access-to-the-host-manager-application&quot;&gt;Step 8 - Granting Access To The Host Manager Application&lt;/h2&gt;

&lt;p&gt;First open the configuration file for the Host Manager Application.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo vi /opt/tomcat/webapps/host-manager/META-INF/context.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Complete the same activities as done in Step 7 above for this file.&lt;/p&gt;

&lt;p&gt;Save the file and then exit.&lt;/p&gt;

&lt;h2 id=&quot;step-9---trying-it-out&quot;&gt;Step 9 - Trying it out&lt;/h2&gt;

&lt;p&gt;After all your hard work it’s time to check to see if all is working as expected.  To put the above changes to work it is necessary to restart tomcat.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo systemctl restart tomcat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, close your browser and then relaunch it and then navigate to the Tomcat home page.&lt;/p&gt;

&lt;p&gt;http://localhost:8080&lt;/p&gt;

&lt;p&gt;or &lt;code class=&quot;highlighter-rouge&quot;&gt;http://your_servers_ip:8080&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Click on the button that says “Server Status”.  You should be prompted for the username and password you entered in Step 6.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Well, that’s all there is to it, you should now have Tomcat 9 successfully installed on your Ubuntu 18.04 server or desktop and be able to login and view the Server Status, view the Host Manager or the Manager App.  You can experiment around with additional users and roles, try the examples provided and of course there’s that thing called documentation.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;p&gt;https://www.digitalocean.com/community/tutorials/install-tomcat-9-ubuntu-1804&lt;/p&gt;</content><author><name>Chad Downey</name></author><summary type="html"></summary></entry><entry><title type="html">Staticman API Dokku Deployment</title><link href="https://shoreviewanalytics.github.io/Staticman-API-Dokku-Deployment/" rel="alternate" type="text/html" title="Staticman API Dokku Deployment" /><published>2018-10-08T00:00:00-04:00</published><updated>2018-10-08T00:00:00-04:00</updated><id>https://shoreviewanalytics.github.io/Staticman-API-Dokku-Deployment</id><content type="html" xml:base="https://shoreviewanalytics.github.io/Staticman-API-Dokku-Deployment/">&lt;h2 id=&quot;using-dokku-to-deploy-the-staticman-api&quot;&gt;Using Dokku to deploy the Staticman API&lt;/h2&gt;

&lt;p&gt;If you are using the public (GitHub hosted) version of &lt;a href=&quot;https://github.com/eduardoboucas/staticman&quot; title=&quot;Staticman API &quot;&gt;Staticman API&lt;/a&gt;, you might have noticed that due to its popularity and GitHub API limits, it has become more difficult to use it as a comments engine for your blog or website.  Perhaps you’ve experienced the  &lt;a href=&quot;https://github.com/eduardoboucas/staticman/issues/227&quot; title=&quot;Invitation not found&quot;&gt;‘Invitation not found’&lt;/a&gt; or the ‘Too many requests at this time’ message when trying to use the public version of Staticman. As of September 2018, the author of the minimal-mistakes Jekyll theme, which I’m using for this blog and the author of the Staticman API, recommend deploying a standalone instance of the Staticman API to avoid the GitHub API limits. This post discusses the general process I used to get the Staticman API up and running within a cloud infrastructure, so it can supply a ‘static comments engine’ for my blog hosted on &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup-needs&quot;&gt;Setup Needs:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A domain name and a way to manage it, so you can create a subdomain like staticman.shoreviewanalytics.com.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an account with digitalocean to create a Dokku droplet or similar setup.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a Dokku droplet with your digital ocean account.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create an additional GitHub account.  This account will be the collaborator to your blog repository and will be used to create a GitHub token.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install npm on your workstation, so you can run the tests provided with Staticman and to install json to format .json files.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now the fun begins.  If you have all the setup needs and are familiar with git, you should be able to work towards a successful deployment of Staticman API to a digitalocean Dokku droplet using the following steps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a Dokku droplet and do the basic server configuration.  Use your domain to create a subdomain that points to this droplet. After you complete this step you should be able to ssh to your droplet using at least one account and you should be able to ping your droplet at staticman.yourdomain.com.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Fork the Staticman API repository.  I actually forked a repository that had already been forked from the original Staticman API.  I did this because after doing some recon, I found only one &lt;a href=&quot;https://www.flyinggrizzly.net/2017/12/setting-up-staticman/&quot; title=&quot;Setting up Staticman for comments on a Jekyll blog&quot;&gt;example&lt;/a&gt; of a standalone version of Staticman API using Dokku.  After trying to deploy a few times using the vanilla repository and failing, I wanted to start from a version of the code that had been successfully deployed. I believe the main reason why the deploy was failing is because of the Docker deployment files, so forking the current repository should be fine.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clone your forked version of Staticman API from your GitHub account to your local environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a new local branch for the cloned repository that you forked on your workstation.  Don’t forget to checkout your new branch for your edits. Also, if you didn’t fork a repository that had the docker files removed, then go ahead and remove them now and then update your local branch repository.  This step is really important since to deploy Staticman you will need to have a GitHub token and a ssh key to add to a configuration file. The goal here, at least based on my understanding is that you don’t want to push any secrets out to GitHub.  If you do, you will get a nice little message from them saying you have sensitive information like a GitHub token and they will disable it so you will have to create another one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use your second GitHub account and add it as a collaborator to your GitHub Pages blog repository.  Also create a GitHub token from this account to be used in the config.production.json file in Step 6.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you look at the root directory in your staticman folder you will see a file called config.sample.json.  Copy this file to a file named config.production.json. Now that you have this new file you can edit it using the GitHub token and a valid ssh key.  GitHub provides the documentation on how to create a token and how to create an ssh key.  I found that converting the standard key to .pem file works best.  After creating the config file and obtaining the token and key add them to this file.  Just be sure to use the ssh key from your GitHub account that holds your blog and use the token from the second GitHub account. Also when creating a ssh key, you should create one without a passphrase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now you should be close to pushing Staticman API, your forked / cloned version of Staticman that you’ve edited in your local branch to your Dokku droplet. Commit the changes made to config.production.json in the local branch.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 8&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Go to the Dokku droplet and create a Dokku application called staticman in all lower case letters.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dokku apps:create staticman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 9&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now setup a remote git repository for your Doku server on your workstation, by using the following command.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add dokku dokku@yourserver:staticman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can check to see what remote repositories you can push to using this command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Push the local branch you created earlier to your remote repository on your Dokku droplet.  Notice you are NOT pushing the master branch that you haven’t updated.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push dokku local:master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is where you find out if you have correctly edited the config.production.json file.  If you are in doubt on whether you have a good format for your config.production.json file use the following command to check it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;json -f config.production.json  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 10&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is where it really gets cool.  You can now push Staticman to your Dokku droplet with the following command assuming you named your local git branch “local”.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push dokku local:master  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if all goes well you will have pushed your local branch of Staticman to your Dokku server.  If you have your DNS setup correctly you should be able to navigate to your Staticman API deploy by opening up a browser and typing in staticman.yourdomain.com.  For me it’s staticman.shoreviewanalytics.com.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 11&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you have Staticman up and running you need to activate it so it can work with your blog.  To do this as provided in Staticman API documentation navigate to the an address like the following that makes sense for your deployment.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://staticman.yourdomain.com/v2/connect/yourgithubusername/yourgithubpagesblog.github.io  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If all goes well you should get a response of ‘OK’.  If you don’t there’s something wrong and you’ll need to dig in a bit.  In my case I had to dig in a lot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 12&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that you have a working deploy of Staticman so you can navigate to it as in Step 9, it’s time to add the ability to navigate to the Staticman URL using HTTPS.  To do this you need to issue the following commands on your Dokku droplet server.  Essentially, if you don’t add this you won’t be able to use your comments so don’t skip it. This step depends on dokku-letsencrypt.&lt;/p&gt;

&lt;p&gt;first get it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;set an email address for notifications&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dokku config:set --no-restart staticman DOKKU_LETSENCRYPT_EMAIL=your email address goes here
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;enable it&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dokku letsencrypt staticman
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;set up auto-renewal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	dokku letsencrypt:cron-job --add
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, this post doesn’t include all the details you will need, but if you review the content from the references below and are able to complete the above steps, you should be able to get a working deployment of the Staticman API on a digitalocean Dokku droplet.  If you to try this out and get stuck and want some clarification, guess what, you can use the comments form below to get in touch with me.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://staticman.net/docs/&quot; title=&quot;Staticman Documentation&quot;&gt;Staticman Documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@pimterry/effortlessly-add-https-to-dokku-with-lets-encrypt-900696366890&quot; title=&quot;Effortlessly add HTTPS to Dokku, with Let’s Encrypt&quot;&gt;Effortlessly add HTTPS to Dokku, with Let’s Encrypt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://mademistakes.com/articles/improving-jekyll-static-comments/&quot; title=&quot;Improving static comments with Jekyll &amp;amp; Staticman&quot;&gt;Improving static comments with Jekyll &amp;amp; Staticman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dokku.viewdocs.io/dokku~v0.12.13/deployment/application-deployment/&quot; title=&quot;Deploying to Dokku&quot;&gt;Deploying to Dokku&lt;/a&gt;&lt;/p&gt;</content><author><name>Chad Downey</name></author><summary type="html">Using Dokku to deploy the Staticman API</summary></entry><entry><title type="html">Spark Logback Example Two</title><link href="https://shoreviewanalytics.github.io/Spark-Logback-Example-Two/" rel="alternate" type="text/html" title="Spark Logback Example Two" /><published>2018-10-08T00:00:00-04:00</published><updated>2018-10-08T00:00:00-04:00</updated><id>https://shoreviewanalytics.github.io/Spark-Logback-Example-Two</id><content type="html" xml:base="https://shoreviewanalytics.github.io/Spark-Logback-Example-Two/">&lt;h2 id=&quot;spark-logback-example-two&quot;&gt;Spark Logback Example Two&lt;/h2&gt;

&lt;p&gt;This post is relates to my other &lt;a href=&quot;https://shoreviewanalytics.github.io/Spark-Logback-Example-One/&quot;&gt;post&lt;/a&gt; on how to use Logback, the successor to Log4j with your spark application to create job specific logging when using the DataStax Enterprise (DSE) Analytics platform. Essentially everything is the same for this example, except you don’t need to pass the location of the logback.xml file in the spark-submit and this example also let’s you pass the job name to the logback.xml file, so the name of the log file is the same as the name of the job.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A Java development environment (This example uses Eclipse).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An available DSE Analytics development environment.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clone the following repository to your workstation using the following command.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/shoreviewanalytics/spark-logback-example-two.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Compile the code to a .jar file and adjust the path to the .csv file. For example, it will be necessary to change the path to the words.csv.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This step is optional if you are not working on a distributed environment. If have access to a local or cloud based DSE cluster, you can add the words.csv to an accessible path to the user running the job on each node in your cluster.  For example,  home/username/data/words.csv.  It is not necessary to have this file as you can just create your own file.csv and then just create a list of words with a random number of duplicates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run the example using dse spark-submit.  Notice that the option –driver-java-options “-Dlogback.configurationFile=/pathtoyour/logback.xml” is no longer in the spark-submit command.  This command is separated into multiple lines for formatting in this post and should be run as a single line in a terminal window.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dse -u username -p password spark-submit
--class com.java.spark.LoggingSample
--master dse://?
/path to your jarfile/LoggingSample.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is where the fun happens.  Look for the following property in the logback.xml file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;logger name=&quot;org.apache.spark&quot; level=&quot;INFO&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When this property is set to INFO the log will contain DAG information and more details about the job running.&lt;/p&gt;

&lt;p&gt;If you set the level to OFF, the output to the log file is significantly reduced, but the explicit logging messages you have added to your code will still be logged.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;logger name=&quot;org.apache.spark&quot; level=&quot;OFF&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can experiment with the various ways to configure a logback.xml file to add or reduce the verbosity of your logging. To learn more about Logback and all of its features check out the project’s &lt;a href=&quot;https://logback.qos.ch/&quot;&gt;website&lt;/a&gt;. Also note that this example includes a class called SysStreamsLogger, which I did not write, but did amend for the purpose of this example.  The SysStreamsLogger.java class redirects the output normally only available through the console to the specified log file set in logback.xml as the spark job is running.  Entries in the log file will have the logger name of SysStreamLogger.java when information is captured from the console and redirected by this class to the log file.&lt;/p&gt;

&lt;p&gt;To test out this logging example on a distributed computing environment, I used a three node cluster with DataStax Enterprise Analytics enabled. For more information about DataStax Enterprise Analytics check out the &lt;a href=&quot;https://www.datastax.com/products/datastax-enterprise-analytics&quot;&gt;DataStax Enterprise Analytics  &lt;/a&gt; page on the DataStax website. If you have questions or feedback regarding this post, you can contact me using the comments form below.&lt;/p&gt;</content><author><name>Chad Downey</name></author><summary type="html">Spark Logback Example Two</summary></entry><entry><title type="html">Spark Logback Example One</title><link href="https://shoreviewanalytics.github.io/Spark-Logback-Example-One/" rel="alternate" type="text/html" title="Spark Logback Example One" /><published>2018-10-08T00:00:00-04:00</published><updated>2018-10-08T00:00:00-04:00</updated><id>https://shoreviewanalytics.github.io/Spark-Logback-Example-One</id><content type="html" xml:base="https://shoreviewanalytics.github.io/Spark-Logback-Example-One/">&lt;h2 id=&quot;spark-logback-example-one&quot;&gt;Spark Logback Example One&lt;/h2&gt;

&lt;p&gt;This post takes a look at how use Logback, the successor to Log4j with your spark application to create application specific logging. If you have spent any amount of time with Apache Spark you will notice that there is a ton of logging that goes on, but that logging is usually limited to what spark as an application is doing so there’s lot’s of logging about spark master or worker processing and what the executors are doing. While this information is important it doesn’t tell you a whole lot about how your specific application is doing across your cluster. With logging setup specifically for the spark job running, you can obtain granular information about how it is running on the spark cluster and detailed  &lt;a href=&quot;https://stackoverflow.com/questions/25836316/how-dag-works-under-the-covers-in-rdd&quot;&gt;DAG&lt;/a&gt; information as well.  In addition, if there are system wide settings for logging of spark applications you can have just one log for all your applications.  This example shows how to create a log file for each spark job and how to use verbose logging for development and then turn it down for production to only log what you really need to log, like errors and basic feedback.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Spark development environment (This example uses Eclipse) or have ability to compile source code to a .jar file with all the necessary dependencies.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An available Spark development environment.  Access to an Apache Spark cluster is ideal if you want to run this example and collect information related to the job running on the cluster.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Clone the following repository to your workstation using the following command.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/shoreviewanalytics/spark-logback-example-one.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Compile the code to a .jar file and adjust the path to the .csv file. For example, it will be necessary to change the path to the words.csv.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Step 3 is optional if you are not working on a distributed environment. If have access to a local or cloud based cluster, you can add the words.csv to an accessible path to the user running the spark job on each node in your cluster.  For example,  home/username/data/words.csv.  It is not necessary to have this file as you can just create your own file.csv and then just create a list of words with a random number of duplicates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Run the example using spark-submit.  The exact syntax of this command depends on the platform you are using, whether you have security enabled or not, the location of your logback.xml file, the location of the .jar file (your spark job) and the configuration of your cluster environment.  Also the following command is separated into multiple lines just for this blog post and should be run as a single line in a terminal window.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dse -u username -p password spark-submit
--class com.java.spark.LoggingSample
--master dse://?
--driver-java-options &quot;-Dlogback.configurationFile=/pathtoyour/logback.xml&quot;
/path to your jarfile/LoggingSample.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;
This is where the fun happens.  Look for the following property in the logback.xml file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;logger name=&quot;org.apache.spark&quot; level=&quot;INFO&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When this property is set to INFO the log will contain DAG information and more details about the job running.&lt;/p&gt;

&lt;p&gt;If you set the level to OFF, the output to the log file is significantly reduced, but the explicit logging messages you have added to your code will still be logged.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;logger name=&quot;org.apache.spark&quot; level=&quot;OFF&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can experiment with the various ways to configure a logback.xml file to add or reduce the verbosity of your logging. To learn more about Logback and all of its features check out the project’s &lt;a href=&quot;https://logback.qos.ch/&quot;&gt;website&lt;/a&gt;. Also note that this example includes a class called SysStreamsLogger, which I did not write, but did amend for the purpose of this example.  The SysStreamsLogger.java class redirects the output normally only available through the console to the specified log file set in logback.xml as the spark job is running.  Entries in the log file will have the logger name of SysStreamLogger.java when information is captured from the console and redirected by this class to the log file.&lt;/p&gt;

&lt;p&gt;Finally, to test out this logging example on a distributed computing environment, I used a three node cluster with DataStax Enterprise Analytics enabled. For more information about DataStax Enterprise Analytics check out the &lt;a href=&quot;https://www.datastax.com/products/datastax-enterprise-analytics&quot;&gt;DataStax Enterprise Analytics  &lt;/a&gt; page on the DataStax website.&lt;/p&gt;</content><author><name>Chad Downey</name></author><summary type="html">Spark Logback Example One</summary></entry><entry><title type="html">How to become a Data Scientist, Data Analyst, Data Engineer or Machine Learning Engineer</title><link href="https://shoreviewanalytics.github.io/How-To-Become-A-Data-Analyst-Data-Scientist-or-Data-Engineer/" rel="alternate" type="text/html" title="How to become a Data Scientist, Data Analyst, Data Engineer or Machine Learning Engineer" /><published>2018-04-10T00:00:00-04:00</published><updated>2018-04-10T00:00:00-04:00</updated><id>https://shoreviewanalytics.github.io/How-To-Become-A-Data-Analyst-Data-Scientist-or-Data-Engineer</id><content type="html" xml:base="https://shoreviewanalytics.github.io/How-To-Become-A-Data-Analyst-Data-Scientist-or-Data-Engineer/">&lt;h2 id=&quot;how-to-become-one-of-the-the-big-4&quot;&gt;How to become one of the (The Big 4)&lt;/h2&gt;

&lt;p&gt;Hello everyone! For this post I want to discuss how to work towards becoming a
Data Scientist, Data Analyst, Data Engineer or Machine Learning Engineer, which
for brevity I will refer to as “The Big 4”.  When I look at the number of job
postings for “The Big 4” on employment web sites as of writing this post it is
astonishing. All you have to do is go to LinkedIn or another job site and do a
search for “Data Analyst” in the United States and you will see several pages of
openings and that’s just for one of “The Big 4”.&lt;/p&gt;

&lt;p&gt;Related to “The Big 4” are specialized roles in Natural Language Processing (NLP) and AI techniques, but I believe these are just variants of say a Machine Learning Engineer role or Data Scientist role, so I don’t mention NLP or AI as separate roles. As of writing this post when I do a search on Linkedin for NLP it returns Data Science positions. Well, the fact that there are many openings with the job title of
“Data Analyst” or “Data Scientist” is great, but what if you haven’t held a job as a “Data Analyst” or “Data Scientist” or any of “The Big 4”?&lt;/p&gt;

&lt;h2 id=&quot;ready-set-go&quot;&gt;Ready, Set, Go!&lt;/h2&gt;

&lt;p&gt;So, where does one start if you are interested in working as one of “The Big 4”?
I took the advice of well-known professionals in the field, those who have
written books or teach “The Big 4”. I also reviewed several blogs of those who
work as one of “The Big 4”, where they share their work and thoughts. I have
enrolled in two different online curriculums one is &lt;a href=&quot;https://www.coursera.org/&quot;&gt;Coursera&lt;/a&gt;, where I am taking a
Machine Learning course. The other is called &lt;a href=&quot;https://www.dataquest.io&quot;&gt;Dataquest.io&lt;/a&gt;, which provides paths
for students who are interested becoming a Data Scientist, Data Analyst or Data
Engineer. I am also considering an online Master’s degree in Data Science.&lt;/p&gt;

&lt;p&gt;As you begin exploration into “The Big 4”, you will realize that there is some
overlap and often you will see in job postings that suffer from I call the “bundle complex” where a given job posting bundles what could possibly be 1 or 2 FTE’s into a position description, but
this is the subject of a future post.&lt;/p&gt;

&lt;p&gt;For now, to show how these roles overlap,
consider the image below a data plotting exercise from my Data Analyst / Data
Scientist track on Dataquest.io. The example, comes from a section on “Improving
Plot Aesthetics” in the “Storytelling Through Data Visualization” course.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shoreviewanalytics.github.io/assets/images/sample-graph.png&quot; alt=&quot;Simple Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To create the graph above, I used standard tools of a Data Analyst or Data
Scientist, which in this case are the Python libraries pandas, matplotlib.pyplot
using IPython.&lt;/p&gt;

&lt;p&gt;The good thing is that much of the software used in “The Big 4”
is open source and very accessible. For example, &lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt;  a software platform, which integrates many different tools for Data Analysts or Data Scientists such as IPython or Jupyter Notebook. Additionally, there are complete Data Science platforms available as
well as Big Data Platforms that integrate “The Big 4” tools.&lt;/p&gt;

&lt;h2 id=&quot;the-mathematics-journey&quot;&gt;The Mathematics Journey&lt;/h2&gt;

&lt;p&gt;One thing that has become clear early on in my Journey into “The Big 4” is the 
need to brush up on statistics, linear algebra, vector mathematics and some calculus.  If you
plan to become a Machine Learning Engineer or Data Scientist it is important to know how to solve basic equations, but you won’t need to compute partial derivatives necessarily.  However, if you are a mathematical wizard and can apply what you know to the formulas used within the field, it doesn’t hurt either. As I continue my journey with “The Big 4”, I am realizing that rather than solving equations manually it is more important to understand which model 
to apply and the proper way to apply it, in order to produce the best results.&lt;/p&gt;

&lt;p&gt;The Machine Learning class that I am currently taking on Coursera does include a fair amount of mathematical formulas, but these formulas themselves are rarely used to manually produce a result.  Instead, the formulas are translated to a more practical format to be used in a programming language.    As an example, here is a formula used in my machine learning course in week 6 of the class.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://shoreviewanalytics.github.io/assets/images/formula.png&quot; alt=&quot;Cost Function&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This formula represents what is called a cost function and it is helping to calculate the errors on training data and cross validation data in a process to plot a learning curve, which is helpful in debugging a machine learning algorithm.  The good thing is during the class you translate this formula numerous times into a vectorized equivalent within the Octave programming environment.  Yay, for Octave!  As you continue your journey you will discover that many different programming languages such as Python or R have what are called mathematical libraries that provide translations of machine learning formulas.  While the language is different, the implementaion is usually optimized.&lt;/p&gt;

&lt;h2 id=&quot;do-i-need-a-degree-in-data-science-or-data-analysis&quot;&gt;Do I need a Degree in Data Science or Data Analysis?&lt;/h2&gt;

&lt;p&gt;You might be asking yourself if you should go back to college to obtain a Master’s Degree in Data Science? That’s a good question, which is not easily answered. The answer to this question is that it really depends on where you are in your career and whether you have a STEM degree.  In my
case, I had not done any statistics since college, but I do hold a Master’s degree in Information Technology and have many years of experience working with data driven applications and recently held the role of Analytics Consultant, which provided valuable experience in data analysis and data visualization with exposure to some data science methods.  My most recent role more than likely served as catalyst to my journey to become one of “The Big 4”.&lt;/p&gt;

&lt;p&gt;While doing my research, I found an &lt;a href=&quot;https://www.forbes.com/sites/metabrown/2017/10/31/read-this-before-you-pay-for-that-masters-in-data-science-program/2/#3b691f8850d5&quot;&gt;article&lt;/a&gt;  on Forbes written by an expert in the field that says you may want to rethink getting your degree in Data Science, meaning you may not have to obtain one of these degrees, in order to pursue “The Big 4”. The article suggests that you review or take a basic statistics course to become familiar with some of the methods that are used in “The Big 4” roles to determine if you even like it or to show you that you can learn the techniques without actually enrolling in Data Science program. Indeed, this appears to be true, because there are many online resources that provide more than enough to get started. However, this doesn’t mean that I won’t pursue a Master’s degree in Data Science to expand my horizons, it just means I am carefully considering if it is the right thing for me to do.  I’m thankful that I read this article since I did end up downloading a free e-book on statistics. By the way, the book is called “&lt;a href=&quot;https://openstax.org/details/introductory-statistics&quot;&gt;Introductory Statistics&lt;/a&gt; “ and it has a very nice introduction to Linear Regression.&lt;/p&gt;

&lt;h2 id=&quot;create-your-blog&quot;&gt;Create your Blog!&lt;/h2&gt;

&lt;p&gt;I found that it is recommended and, in some cases, required for employment purposes or education programs that you create a blog or create blog posts if you are planning to pursue “The Big 4”. For example, an employer that I recently
interviewed with that provides a Big Data platform stated that as an employee you are expected to contribute to the company blog and can also use the time spent blogging as part of your utilization.&lt;/p&gt;

&lt;p&gt;I’ve also seen programs that teach “The Big 4” require you to blog as you progress through the program. While you do not have
to create a blog, for me it works, because I like blogging and can use Github Pages to host my blog and essentially, the same platform to post code samples worthy of sharing, helping me to stay organized.&lt;/p&gt;

&lt;p&gt;If you haven’t created a blog yet, be sure to check out my &lt;a href=&quot;https://shoreviewanalytics.github.io/Create-Jekyll-Blog-with-Minimal-Mistakes-theme-on-Ubuntu-16.04/&quot;&gt;tutorial&lt;/a&gt;  on how to build a blog using Jeckyll and Github Pages. It will 
take some effort to get through it, but after completing it, you will have very nice professional looking blog, that is relatively easy to maintain.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;After enrolling in online curriculums above, I realized that many of the tools used in “The Big 4” are readily available on a platform that I’m already using for a day to day workstation, which is Ubuntu Linux. While you do not have to
use Linux to become one of “The Big 4”, you might be surprised to learn that most if not all of the tools used for these careers are readily available on the Linux platform. This is especially great if you are like me and enjoy working on
an open source platform. Either way hopefully you are doing something that you enjoy.&lt;/p&gt;

&lt;p&gt;To be perfectly honest, working toward becoming one of “The Big 4” is not necessarily an easy journey.  If becoming one of “The Big 4” was easy, then anyone or everyone would be doing it.&lt;/p&gt;

&lt;p&gt;If you are considering a career change, have a great deal of experience with data systems (DBA, Data Modeling, OO Programming, SQL etc.) and have done some data visualization or quantitative reporting, and want to take your skill set and use it to become one of “The Big 4”, you can get there a variety of ways and as it turns out it doesn’t have to necessarily be expensive either. You can probably get there without having a great deal of experience in data systems or programing, but the Journey may take a bit longer. For example, if you have not done any programming it may be pretty hard to pick up Python as used in my Data Analyst / Data Science track with Dataquest.io. The good is that they have a complete introduction to Python as a part of their Data Analyst or Data Scientist tracks and there are other online training sites such as &lt;a href=&quot;https://www.datacamp.com/&quot;&gt;DataCamp&lt;/a&gt; that provide similar training with some free tutorials for Python or R.&lt;/p&gt;</content><author><name>Chad Downey</name></author><summary type="html">How to become one of the (The Big 4)</summary></entry><entry><title type="html">Create Jekyll Blog with Minimal Mistakes theme on Ubuntu 16.04</title><link href="https://shoreviewanalytics.github.io/Create-Jekyll-Blog-with-Minimal-Mistakes-theme-on-Ubuntu-16.04/" rel="alternate" type="text/html" title="Create Jekyll Blog with Minimal Mistakes theme on Ubuntu 16.04" /><published>2018-02-19T00:00:00-05:00</published><updated>2018-02-19T00:00:00-05:00</updated><id>https://shoreviewanalytics.github.io/Create-Jekyll-Blog-with-Minimal-Mistakes-theme-on-Ubuntu-16.04</id><content type="html" xml:base="https://shoreviewanalytics.github.io/Create-Jekyll-Blog-with-Minimal-Mistakes-theme-on-Ubuntu-16.04/">&lt;p&gt;&lt;img src=&quot;https://shoreviewanalytics.github.io/assets/images/jekyll-logo-black-red-transparent.png&quot; alt=&quot;Jekyll Island&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Recently, I discovered &lt;a href=&quot;https://jekyllrb.com/&quot; title=&quot;Jekyll&quot;&gt;Jekyll&lt;/a&gt; a static website and blog generator that let’s you create a feature rich, professional looking blog and then publish it on &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;why-jekyll&quot;&gt;Why Jekyll?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A Jekyll blog hosted on Github Pages, gives you complete control over your content.&lt;/li&gt;
  &lt;li&gt;Hosting on Github Pages is free (for now!).&lt;/li&gt;
  &lt;li&gt;You desire a professional looking blog without the complexity and dependence on a hosting company.&lt;/li&gt;
  &lt;li&gt;Because, I give Jekyll a :+1:!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;here-are-the-requirements-i-had-in-mind-for-my-blog&quot;&gt;Here are the requirements I had in mind for my blog.&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Blog should portable and not dependent on a specific hosting company, especially the content.&lt;/li&gt;
  &lt;li&gt;The theme used for it should be easy to maintain and have advanced features.&lt;/li&gt;
  &lt;li&gt;The theme and blog software should be able to be updated.&lt;/li&gt;
  &lt;li&gt;It should be low to no cost to deploy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you host your blog on Github Pages and abide by their &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/#usage-limits&quot;&gt;guidelines&lt;/a&gt; you can deploy your blog or website for no cost.&lt;/p&gt;

&lt;p&gt;By the way there are many web based tutorials that you can review to get started with Jekyll.  To get your feet wet check out the following tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.taniarascia.com/make-a-static-website-with-jekyll/&quot; title=&quot;Tania's Tutorial&quot;&gt;Tania’s tutorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps below outline how to create a Jekyll powered blog using the &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot; title=&quot;minimal-mistakes&quot;&gt;minimal-mistakes&lt;/a&gt; theme hosting it using &lt;a href=&quot;https://pages.github.com/&quot; title=&quot;Github Pages&quot;&gt;github pages&lt;/a&gt;. If you review the quick start guide for the minimal-mistakes theme, it provides three different methods to install. This post explains how to use the fork method. For QA, I have gone through the steps below to build the mininmalmistakesdemo site at least two times to be sure they are accurate and lead to success.&lt;/p&gt;

&lt;p&gt;It will be necessary to move slowly and do all the tasks in each step. Some of the steps, like creating a gh-pages layer on Github (as described in Step 10 below), can be confusing if you haven’t used git.&lt;/p&gt;

&lt;p&gt;I have not used these steps to build a githubusername.github.io site, because I already have my blog published at that location. From my experience with Github you do not have to have a working site at githubusername.github.io to deploy to githubusername.github.io/subsite, but you do need to use this nomenclature to publish a subsite.&lt;/p&gt;

&lt;p&gt;The cool thing is when you complete this tutorial you should have a fully functional Jekyll blog using the minimal-mistakes theme.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://shoreviewanalytics.github.io/minimalmistakesjekylldemo/&quot; title=&quot;minimal-mistakes theme demo&quot;&gt;https://shoreviewanalytics.github.io/minimalmistakesjekylldemo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The initial version of the site is pretty basic looking, so you will need to make adjustments and add your own content to make it more interesting. What’s really cool about going this route for your blog is you will have a professional blog that looks fantastic on any browser including your mobile phone.&lt;/p&gt;

&lt;h2 id=&quot;step-1&quot;&gt;Step 1&lt;/h2&gt;

&lt;p&gt;Install dependencies&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install gcc make zlib1g-dev sqlite3 automake autoconf libtool build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install Ruby using the following command:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install ruby ruby-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install Bundler&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Usually git is installed on Ubuntu by default, but in case it isn’t, use the following command to install it.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you currently do not have a Github account, you will need to create one, to complete this tutorial.&lt;/p&gt;

&lt;h2 id=&quot;step-2&quot;&gt;Step 2&lt;/h2&gt;

&lt;p&gt;After you have a setup your github account, create a new repository using the following naming conventions.&lt;/p&gt;

&lt;p&gt;Create a repository with a name of githubusername.github.io if you want a web address like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;https://githubusername.github.io&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Create a repository with a name minimaljekylldemo if you want a web address like:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;https://githubusername.github.io/minimaljekylldemo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Creating a repository defaults to the root or master level and you can only have one Jekyll site at this level.  All other sites must be placed at the gh-pages level. For example, if you are reading this post and you already have a blog like I do at http://shoreviewanalytics.github.io you would create a new repository called minimalmistakesjekylldemo and would navigate to it with the following url.  https://shoreviewanalytics.github.io/minimalmistakesjekylldemo/.&lt;/p&gt;

&lt;p&gt;I will get into the details of how this is done and why below.  The main point of this step is to make sure you create an account on github.com and also create the desired repository.&lt;/p&gt;

&lt;h2 id=&quot;step-3&quot;&gt;Step 3&lt;/h2&gt;

&lt;p&gt;Create a new folder in your home directory to use as a sandbox for your Jekyll efforts.  I called mine websites, but you can call it whatever suites your needs.&lt;/p&gt;

&lt;h2 id=&quot;step-4&quot;&gt;Step 4&lt;/h2&gt;

&lt;p&gt;Next you will need to fork the minimal-mistakes theme.  To do this you will need to login to your github account and then search for the minimal-mistakes repository.  Once you have found the minimal-mistakes repository, click on the fork icon in the upper right hand corner of the repository.  Once the fork process has completed you will have the minimal-mistakes repository as a fork under your github account.&lt;/p&gt;

&lt;h2 id=&quot;step-5&quot;&gt;Step 5&lt;/h2&gt;

&lt;p&gt;Now that you have the minimal-mistakes repository forked to your github account, you can clone it to the folder created in Step 3.&lt;/p&gt;

&lt;p&gt;Click on the green button that says Clone or download and then click on the copy icon to copy the URL to your clipboard. Issue the following command in a terminal when in the root of your sandbox folder.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/shoreviewanalytics/minimal-mistakes.git  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should now have the minimal-mistakes repository on your local machine in your sandbox / jekyll development directory created above in step 3.&lt;/p&gt;

&lt;h2 id=&quot;step-6&quot;&gt;Step 6&lt;/h2&gt;

&lt;p&gt;Clean up the minimal-mistakes directory, by removing the following folders and files.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;.github&lt;/li&gt;
  &lt;li&gt;.git&lt;/li&gt;
  &lt;li&gt;docs&lt;/li&gt;
  &lt;li&gt;test&lt;/li&gt;
  &lt;li&gt;screenshot.png&lt;/li&gt;
  &lt;li&gt;screenshot-layouts.png&lt;/li&gt;
  &lt;li&gt;README.md&lt;/li&gt;
  &lt;li&gt;.gitiqnore&lt;/li&gt;
  &lt;li&gt;.gitattributes&lt;/li&gt;
  &lt;li&gt;.editorconfig&lt;/li&gt;
  &lt;li&gt;banner.js&lt;/li&gt;
  &lt;li&gt;CHANGELOG.md&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-7&quot;&gt;Step 7&lt;/h2&gt;

&lt;p&gt;Using the command line from the root of the minimal-mistakes directory issue the following commands.&lt;/p&gt;

&lt;p&gt;–Initialize as git&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;–Install bundles&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;–Update bundles&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;–Build the site&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve watch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If using Ubuntu you can either copy the server address and paste it into a browser or right click on the link and choose
“open link”.&lt;/p&gt;

&lt;p&gt;You should now see a very basic looking Jekyll blog, that uses the minimal-mistakes theme.&lt;/p&gt;

&lt;h2 id=&quot;step-8&quot;&gt;Step 8&lt;/h2&gt;

&lt;p&gt;While in the minimal-mistakes directory, copy configuration file named &lt;em&gt;_config.yml&lt;/em&gt; to &lt;em&gt;_config_dev.yml&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Make the following edits to the &lt;em&gt;_config_dev.yml&lt;/em&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url     : &quot;http://localhost:4000/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-9&quot;&gt;Step 9&lt;/h2&gt;

&lt;p&gt;Now when working locally you can issue the following command.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve --config _config_dev.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;note: When working locally you might see the following error when previewing.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR `/favicon.ico' not found.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This error appears to be harmless and doesn’t impact the use of the site or cause any errors that I have seen when deploying to github.&lt;/p&gt;

&lt;h2 id=&quot;step-10&quot;&gt;Step 10&lt;/h2&gt;

&lt;p&gt;Make the appropriate edits to the &lt;em&gt;_config.yml&lt;/em&gt; and &lt;em&gt;_config_dev.yml&lt;/em&gt;.&lt;br /&gt;
For the purposes of this tutorial I will not discuss all of the options in this file. They are described well in the minimal-mistakes documentation.
After making edits run the following command to be sure all is well.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve --config _config_dev.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;step-11&quot;&gt;Step 11&lt;/h2&gt;

&lt;p&gt;Make the appropriate edits to &lt;em&gt;_config.yml&lt;/em&gt; based on your github account and the repository you created.&lt;/p&gt;

&lt;p&gt;The following settings are used if you are creating a sub site or gh-pages site.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url     : &quot;https://shoreviewanalytics.github.io&quot;
baseurl : &quot;/minimalmistakesjekylldemo&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To ensure the site still compiles run the following commands.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll --config _config.yml serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you have a basic blog minus any customizations that you will want, you can publish it to github.&lt;/p&gt;

&lt;p&gt;There are two different locations where you can publish your blog on github.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The root of your github account also known as the master.  This is when you want to view your blog at a web address like I am doing at shoreviewanalytics.github.io.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can also serve up your blog using a project site also known as gh-pages.  This is when you want to view your blog at an address like shoreviewanalytics.github.io/minimalmistakesjekylldemo.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note: You can only have one site published at the master level.  You might be able to have multiple repositories at the master level, but github will not recognize multiple jekyll blogs at the root level.&lt;/p&gt;

&lt;p&gt;If you want to setup your blog so it is served at githubusername.github.io just don’t change the default branch as described below.&lt;/p&gt;

&lt;p&gt;If you are following along and only want to demo the minimal-mistakes theme you can create a new repository on github called minimalmistakesjekylldemo.  After creating the repository make sure you place it in a branch adjacent to master by creating a new branch called ‘gh-pages’. To do this you will need to create the branch gh-pages by clicking on branch drop down of the minimalmistakesjekylldemo repository and then typing in the name gh-pages.  Once you have done this click on settings and go to branches and set this repository to the default branch of gh-pages. Make sure you do not have anything in the directory before making this change, otherwise it will all be gone after this change.  :)&lt;/p&gt;

&lt;p&gt;Next, on your local computer open a terminal session in your sandbox root folder to clone the new gh-pages repository by issuing the following command.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/yourgithubusername/minimalmistakesjekylldemo.git
cd minimalmistakesjekylldemo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you want to access your blog at githubusername.github.io, then you would create a new repository called githubusername.github.io.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/yourgithubusername/yourgithubusername.github.io.git
cd yourgithubusername.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Regardless, each folder will be empty except for a .git folder.&lt;/p&gt;

&lt;h2 id=&quot;step-12&quot;&gt;Step 12&lt;/h2&gt;

&lt;p&gt;Next, copy the all the content minus the .git folder from the forked minimal-mistakes repository called “minimal-mistakes”.  Remember the folder options above. You will either be creating a new repository at the master level or gh-pages level.&lt;/p&gt;

&lt;h2 id=&quot;step-13&quot;&gt;Step 13&lt;/h2&gt;

&lt;p&gt;Using a terminal session in the root of the new repository on you local machine, issue the following command to make sure the the site is still functional.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You should be able to navigate to the site locally.&lt;/p&gt;

&lt;h2 id=&quot;step-14&quot;&gt;Step 14&lt;/h2&gt;

&lt;p&gt;Now you can push minimalmistakesjekylldemo or githubusername.github.io to the repository created in step 11.&lt;/p&gt;

&lt;p&gt;Issue the following commands if you want to push to gh-pages.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;first minimalmistakesjekylldemo&quot;
git push -u origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Issue the following commands if have a repository named githubusername.github.io.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
git commit -m &quot;first githubusername.github.io&quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Congratulations! You should now have a working jekyll blog using the minimal-mistakes theme that is served up at the root or master level or the gh-pages level of your github account.
Of course this is just the beginning to all the fun.  As you can see there are many options and features to explore.&lt;/p&gt;

&lt;p&gt;After initial deployment of my blog using the fork method, I switched gears to the gem method, so I could take advantage of major changes to the theme and have a more tidy repository for my blog. One of my requirements above was to have a blog that I could easily maintain. If you are in a hurry and want to just get started with the gem method to use the minimal mistakes theme, you can  &lt;a href=&quot;https://github.com/shoreviewanalytics/shoreviewanalytics.github.io&quot; title=&quot;fork&quot;&gt;fork&lt;/a&gt; my repository.&lt;/p&gt;

&lt;h2 id=&quot;markdown-reference&quot;&gt;Markdown Reference:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; title=&quot;Markdown-Cheatsheet&quot;&gt;Markdown-Cheatsheet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cirosantilli.com/markdown-style-guide/&quot; title=&quot;Markdown Style Guide&quot;&gt;Markdown Style Guide&lt;/a&gt;&lt;/p&gt;</content><author><name>Chad Downey</name></author><summary type="html"></summary></entry></feed>